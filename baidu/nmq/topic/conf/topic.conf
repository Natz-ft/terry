#commit提交服务
#[默认配置(字符串),  _svr_topic_commit_name : _svr_topic_commit_name]
_svr_topic_commit_name : topic_commit
#启动服务的端口
#[默认配置(uint),  _svr_topic_commit_port : 9910]
_svr_topic_commit_port : 9910
#设置服务的读缓冲区，默认为1<<20 bytes
#[默认配置(uint),  _svr_topic_commit_readbufsize : 1048576]
_svr_topic_commit_readbufsize : 10485760
#设置服务的写缓冲区，默认为1<<20 bytes
#[默认配置(uint),  _svr_topic_commit_writebufsize : 1048576]
_svr_topic_commit_writebufsize : 10485760
#设置服务的用户缓冲区，默认为0 bytes
#[默认配置(uint),  _svr_topic_commit_userbufsize : 0]
_svr_topic_commit_userbufsize : 0
#服务的连接超时(单位:ms)
#[默认配置(uint),  _svr_topic_commit_connecttimeout : 500]
_svr_topic_commit_connecttimeout : 100
#服务的读超时(单位:ms)
#[默认配置(uint),  _svr_topic_commit_readtimeout : 500]
_svr_topic_commit_readtimeout : 1000
#服务的写超时(单位:ms)
#[默认配置(uint),  _svr_topic_commit_writetimeout : 500]
_svr_topic_commit_writetimeout : 1000
#服务启动的线程数
#[默认配置(uint),  _svr_topic_commit_threadnum : 20]
_svr_topic_commit_threadnum : 5
#服务连接的类型(0:短连接, 1:长连接)example: 0 (use short connect)
#[默认配置(uint),  _svr_topic_commit_connecttype : 0]
#和proxy的配置保持一致，一般用长连接
_svr_topic_commit_connecttype : 1
#服务使用的pool类型(0:XPOOL, 1:CPOOL, 2:EPOOL, 3:APOOL)
#[默认配置(uint),  _svr_topic_commit_servertype : 2]
_svr_topic_commit_servertype : 2
#CPOOL的socksize当使用CPOOL时设置有效
#[默认配置(uint),  _svr_topic_commit_quenesize : 100]
_svr_topic_commit_quenesize : 100
#CPOOL的socksize当使用CPOOL时设置有效
#[默认配置(uint),  _svr_topic_commit_socksize : 500]
_svr_topic_commit_socksize : 500
#授权IP文件
#[默认配置(字符串),  _svr_topic_commit_auth : ]
_svr_topic_commit_auth : ./conf/commit_server_ip_whitelist

#di server，提供主从同步服务
#[默认配置(字符串),  _svr_topic_di_name : _svr_topic_di_name]
_svr_topic_di_name : topic_di
#启动服务的端口
#[默认配置(uint),  _svr_topic_di_port : 9911]
_svr_topic_di_port : 9911
#设置服务的读缓冲区，默认为1<<20 bytes
#[默认配置(uint),  _svr_topic_di_readbufsize : 1048576]
_svr_topic_di_readbufsize : 10485760
#设置服务的写缓冲区，默认为1<<20 bytes
#[默认配置(uint),  _svr_topic_di_writebufsize : 1048576]
_svr_topic_di_writebufsize : 10485760
#设置服务的用户缓冲区，默认为0 bytes
#[默认配置(uint),  _svr_topic_di_userbufsize : 0]
_svr_topic_di_userbufsize : 0
#服务的连接超时(单位:ms)
#[默认配置(uint),  _svr_topic_di_connecttimeout : 500]
_svr_topic_di_connecttimeout : 100
#服务的读超时(单位:ms)
#[默认配置(uint),  _svr_topic_di_readtimeout : 500]
_svr_topic_di_readtimeout : 1000
#服务的写超时(单位:ms)
#[默认配置(uint),  _svr_topic_di_writetimeout : 500]
_svr_topic_di_writetimeout : 1000
#服务启动的线程数
#[默认配置(uint),  _svr_topic_di_threadnum : 20]
#线程数一定要高于slave的数目
_svr_topic_di_threadnum : 3
#服务连接的类型(0:短连接, 1:长连接)example: 0 (use short connect)
#[默认配置(uint),  _svr_topic_di_connecttype : 0]
#用于主从，使用pipeline模式，这里必须用短连接
_svr_topic_di_connecttype : 0
#服务使用的pool类型(0:XPOOL, 1:CPOOL, 2:EPOOL, 3:APOOL)
#[默认配置(uint),  _svr_topic_di_servertype : 2]
_svr_topic_di_servertype : 2
#CPOOL的socksize当使用CPOOL时设置有效
#[默认配置(uint),  _svr_topic_di_quenesize : 100]
_svr_topic_di_quenesize : 100
#CPOOL的socksize当使用CPOOL时设置有效
#[默认配置(uint),  _svr_topic_di_socksize : 500]
_svr_topic_di_socksize : 500
#授权IP文件
#[默认配置(字符串),  _svr_topic_di_auth : ]
_svr_topic_di_auth : ./conf/di_server_ip_whitelist

#topic全局配置
[topic]
#slave是否启动di server，如果启动，就可以支持slave级联，一般不启动
slave_enable_di_server : false

#提交时是否检查mcpack版本，建议使用true
check_mcpack_version : true
#合法的mcpack版本，当check_mcpack_version为true时有效，建议使用2
valid_mcpack_version : 2

#读写di的buffer大小，最小1024
di_buf_size : 10485760
#主从同步时keepalive的最小间隔，隔多久会发送一次keepalive包
keepalive_interval_ms : 500
#主从同步中di数据未到时的sleep时间，越小实时性越好，系统消耗也越大
idle_sleep_ms : 10
#发生错误时的sleep时间，避免频繁重试导致系统压力
error_sleep_ms : 500

#master是否启动ub monitor
master_enable_ub_monitor : true
#slave是否启动ub monitor
slave_enable_ub_monitor : false
#设置给ub monitor的线程数，用于初始化ub monitor内部数据，要大于整个模块的总线程数
set_ub_monitor_thread_num : 30

#di配置
[di]
#数据目录
directory : ./data/di
#文件名称的前缀，设定后不可更改
basename : topic_di
#是否计算checksum，默认为1，设定后不可修改。1为true，0为false
checksum : 1
#data文件块大小，默认256，设定后不可更改。取值范围[1, (1024*1024*1024*2)]
block_size : 256
#每个目录中的idx文件个数，默认为10，设定后不可修改。取值范围[1, 10000]
idxfile_perdir : 10
#每个idx文件中index个数，默认为1000w，设定后不可修改。[1,(1024*1024*1024*2/sizeof(transdi2_index_t))]
idxnum_perfile : 10000000

#sync策略，0：按阈值；1：每次都sync。建议为0
#如果为0，当达到1)写盘数超过snyc_step，
#或者2)上次写盘的间隔大于sync_interval_s，就会sync一次
#如果为1，每次写盘都会sync，此时会忽略sync_step和sync_interval_s
sync_strategy : 0
#当按阈值sync时，写多少次会sync一次，建议为1000
sync_step : 1000
#当按阈值sync时，隔多少秒会sync一次，建议为1s
sync_interval_s : 1

$include : ubclient.conf
